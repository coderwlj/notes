import{_ as l,W as e,X as h,Y as r,Z as a,$ as d,a0 as o,a1 as n,D as t}from"./framework-969af508.js";const s={},c=n('<h3 id="技术负债问题" tabindex="-1"><a class="header-anchor" href="#技术负债问题" aria-hidden="true">#</a> 技术负债问题</h3><ol><li>要优化的代码就要尽快优化,不要拖,大量技术负债最终会导致项目代码变成屎山。</li><li>不要总是倾向于&quot;快速实现&quot;,而要考虑&quot;正确实现&quot;。</li></ol><h3 id="函数式编程" tabindex="-1"><a class="header-anchor" href="#函数式编程" aria-hidden="true">#</a> 函数式编程</h3><ol><li>函数式编程更加强调程序执行的结果而非执行的过程</li><li>倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而非设计一个复杂的执行过程</li><li>把过程逻辑写成函数，定义好输入参数，只关心它的输出结果</li><li>函数式编程旨在尽可能的提高代码的无状态性和不变性(纯函数,无副作用)</li></ol><h3 id="编程简单即美" tabindex="-1"><a class="header-anchor" href="#编程简单即美" aria-hidden="true">#</a> 编程简单即美</h3><ol><li>干净、简单、可测试</li></ol><h3 id="重构代码" tabindex="-1"><a class="header-anchor" href="#重构代码" aria-hidden="true">#</a> 重构代码</h3><ol><li>要准确评估现有代码,不要盲目重构,要保证去劣存优</li><li>重构不代表重写所有</li><li>推荐渐进式重构</li><li>每次重构后都要测试是否正确</li><li>不喜欢旧代码的风格或结构不能成为你重构代码的正当理由</li><li>采用新技术也不是重构的充分理由</li><li><strong>记住：重构并不能总是保证新代码会更好</strong></li></ol><h3 id="小心复用" tabindex="-1"><a class="header-anchor" href="#小心复用" aria-hidden="true">#</a> 小心复用</h3><ol><li>技术的使用应该基于背景，否则产生的将不是价值，而是额外的维护成本</li><li>复用有时候会增加系统模块间的耦合</li></ol><h3 id="工欲善其事必先利其器" tabindex="-1"><a class="header-anchor" href="#工欲善其事必先利其器" aria-hidden="true">#</a> 工欲善其事必先利其器</h3><ol><li>要慎重工具的选择,包括组件,第三方库,框架等.</li><li>注意版权问题</li><li>减少工具的配置,否则可能会导致难以维护</li></ol><h3 id="编程即设计" tabindex="-1"><a class="header-anchor" href="#编程即设计" aria-hidden="true">#</a> 编程即设计</h3><ol><li>设计是一个项目的重点,没有设计好的项目后期可能会难以进行</li></ol><h3 id="规范代码格式" tabindex="-1"><a class="header-anchor" href="#规范代码格式" aria-hidden="true">#</a> 规范代码格式</h3><ol><li>代码布局应该是紧凑的、风格一致的、清晰可见的。</li></ol><h3 id="给出编码理由" tabindex="-1"><a class="header-anchor" href="#给出编码理由" aria-hidden="true">#</a> 给出编码理由</h3><ol><li>不断推理出“代码为什么这样写的理由”</li></ol><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h3><ol><li>不要冗余注释,要保证注释有意义,主要告诉别人为什么要有这条注释,提醒注意什么</li><li>注释应当简短、清晰</li><li>代码是最好的注释,优先考虑将你想说的用代码表达出来</li></ol><h3 id="持续学习" tabindex="-1"><a class="header-anchor" href="#持续学习" aria-hidden="true">#</a> 持续学习</h3><ol><li>技术无止境,保持对技术的热爱,坚持学习</li></ol><h3 id="提早部署" tabindex="-1"><a class="header-anchor" href="#提早部署" aria-hidden="true">#</a> 提早部署</h3><ol><li>提早部署，提高可见，提早可用，完成比完美更重要</li></ol><h3 id="严于测试" tabindex="-1"><a class="header-anchor" href="#严于测试" aria-hidden="true">#</a> 严于测试</h3><ol><li>在开发过程中编写的任何测试数据，我们都得尽力严格把控</li></ol><h3 id="了解语言文化" tabindex="-1"><a class="header-anchor" href="#了解语言文化" aria-hidden="true">#</a> 了解语言文化</h3><ol><li>多了解不同编程语言的特点,会更有利于我们反哺我们擅长的语言.</li><li>目光不要局限于编程语言语法层面,而要了解其设计思想</li></ol><h3 id="不相信假设" tabindex="-1"><a class="header-anchor" href="#不相信假设" aria-hidden="true">#</a> 不相信假设</h3><ol><li>问清楚：“什么时候”在“什么条件下”发生“什么事”，而不是“如果”</li></ol><h3 id="不做重复性工作" tabindex="-1"><a class="header-anchor" href="#不做重复性工作" aria-hidden="true">#</a> 不做重复性工作</h3><ol><li>重复是浪费</li><li>重复的逻辑可以抽象</li></ol><h3 id="浮点数不是实数" tabindex="-1"><a class="header-anchor" href="#浮点数不是实数" aria-hidden="true">#</a> 浮点数不是实数</h3><ol><li>浮点数具有精度问题,不是传统意义上的实数</li><li>金融应用中不可以使用浮点数.</li></ol><h3 id="努力不代表回报" tabindex="-1"><a class="header-anchor" href="#努力不代表回报" aria-hidden="true">#</a> 努力不代表回报</h3><ol><li>应该注重方法和效率,而不是盲目低头干</li><li>通过寻找聪明的解决方案来尽可能多地做出贡献，提高你的技能，反思你正在做的事情，并调整你的行为。</li></ol><h3 id="错误追踪" tabindex="-1"><a class="header-anchor" href="#错误追踪" aria-hidden="true">#</a> 错误追踪</h3><ol><li>养成良好的编写错误报告的习惯,要记录错误如何复现,不出错应该什么样子,错误时候是什么样子</li><li>目的不是为了记录错误，追责错误，目的是为了解决错误、避免错误</li></ol><h3 id="less-is-more" tabindex="-1"><a class="header-anchor" href="#less-is-more" aria-hidden="true">#</a> less is more</h3><ol><li>减少不必要的代码</li></ol><h3 id="注意进程通信延迟" tabindex="-1"><a class="header-anchor" href="#注意进程通信延迟" aria-hidden="true">#</a> 注意进程通信延迟</h3><ol><li>重视进程通信导致的延迟，比改变数据结构或调整排序算法会带来更多的回报</li></ol><h3 id="不要忽视构建中的警告" tabindex="-1"><a class="header-anchor" href="#不要忽视构建中的警告" aria-hidden="true">#</a> 不要忽视构建中的警告</h3><ol><li>警告可能不影响运行,但是也为项目埋下了隐患,也为后续别人接管项目增加了难度.</li></ol><h3 id="命令行操作" tabindex="-1"><a class="header-anchor" href="#命令行操作" aria-hidden="true">#</a> 命令行操作</h3><ol><li>IDE 给我们开发提供了方便,但是也隐藏了很多底层细节,导致我们不知道发生了什么.</li><li>适当应用下命令行,可以更好地理解一些工具.</li></ol><h3 id="学习不同的编程范式" tabindex="-1"><a class="header-anchor" href="#学习不同的编程范式" aria-hidden="true">#</a> 学习不同的编程范式</h3><ol><li>至少要熟练掌握面向过程、面向对象、函数式、逻辑、数据流中尽可能多的编程范式</li><li>知识交叉能让你更专业</li></ol><h3 id="重视数据库的学习" tabindex="-1"><a class="header-anchor" href="#重视数据库的学习" aria-hidden="true">#</a> 重视数据库的学习</h3><ol><li>好的数据库选择和设计能让工作事半功倍</li></ol><h3 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello,World</h3><ol><li>当我们在复杂项目中遇到问题不知如何下手解决时,可以试着回归本地，回归命令行，回归小项目，回归最原始的代码.</li></ol><h3 id="代码写给未来的自己看" tabindex="-1"><a class="header-anchor" href="#代码写给未来的自己看" aria-hidden="true">#</a> 代码写给未来的自己看</h3><ol><li>要保证写的代码简洁易懂,而不是难以理解</li></ol><h3 id="善用多态" tabindex="-1"><a class="header-anchor" href="#善用多态" aria-hidden="true">#</a> 善用多态</h3><ol><li>虽然在某些情况下使用 if-then-else 比多态更实用，但更多情况下，多态的编码风格将产生更小、更易读和更稳定的代码库。</li></ol><h3 id="环境同步" tabindex="-1"><a class="header-anchor" href="#环境同步" aria-hidden="true">#</a> 环境同步</h3><ol><li>注意协同开发环境的同步,保证环境信息版本化</li></ol><h3 id="代码告知真相" tabindex="-1"><a class="header-anchor" href="#代码告知真相" aria-hidden="true">#</a> 代码告知真相</h3><ol><li>代码才能清楚的告诉别人你的真实意图，需求文档都不一定能说明全部真相</li><li>注释只是辅助功能，别打算用注释来代替代码进行说明</li><li>写代码要像写诗一样，精心去表达</li></ol><h3 id="精确定义类型" tabindex="-1"><a class="header-anchor" href="#精确定义类型" aria-hidden="true">#</a> 精确定义类型</h3><ol><li>类型定义不规范有可能导致大问题,一个卫星因为程序单位计算错误导致失联</li></ol><h3 id="专业程序员" tabindex="-1"><a class="header-anchor" href="#专业程序员" aria-hidden="true">#</a> 专业程序员</h3><ol><li>责任感、团队合作、不容忍错误、(手艺人、代码干净)</li></ol><h3 id="版本控制" tabindex="-1"><a class="header-anchor" href="#版本控制" aria-hidden="true">#</a> 版本控制</h3><ol><li>所有内容都需置于版本控制之下（源代码、文档、构建脚本、测试用例、第三方库等）；</li><li>版本控制让一些行为可追踪；</li><li>版本控制减少开发之间的摩擦、冲突；</li><li>版本控制让团队更高效</li></ol><h3 id="放下鼠标离开键盘" tabindex="-1"><a class="header-anchor" href="#放下鼠标离开键盘" aria-hidden="true">#</a> 放下鼠标离开键盘</h3><ol><li>当你想问题几个小时都不能解决，应该放下鼠标离开键盘，出去换换脑子；</li><li>换换脑子之后能有更多创意性的解决想法；</li></ol><h3 id="阅读优秀代码" tabindex="-1"><a class="header-anchor" href="#阅读优秀代码" aria-hidden="true">#</a> 阅读优秀代码</h3><ol><li>程序猿喜欢写代码，但是不喜欢读代码；</li><li>思考代码如何易读？</li><li>想提高编程技能，可以通过阅读代码实现；</li><li>阅读源码可以提高编程质量</li></ol><h3 id="学习人文" tabindex="-1"><a class="header-anchor" href="#学习人文" aria-hidden="true">#</a> 学习人文</h3><ol><li>程序的工作往往不是单纯的写代码，不可避免要与人打交道；</li><li>学习人文知识能提升你的思维；</li><li>生活不只是代码</li></ol><h3 id="造轮子" tabindex="-1"><a class="header-anchor" href="#造轮子" aria-hidden="true">#</a> 造轮子</h3><ol><li>别急着否定重复造轮子的行为；</li><li>重复造轮子可以帮助你对工作原理有更深的理解；</li><li>重复造轮子更重要的意义是训练、获得经验；</li></ol><h3 id="代码炸弹" tabindex="-1"><a class="header-anchor" href="#代码炸弹" aria-hidden="true">#</a> 代码炸弹</h3><ol><li>高度耦合的代码都是代码炸弹；</li><li>有很多方法可以衡量和控制代码的耦合度和复杂度；</li><li>衡量耦合有两个指标：扇入和扇出；</li><li>借助这些指标来进行调优；</li></ol><h3 id="从-yes-开始" tabindex="-1"><a class="header-anchor" href="#从-yes-开始" aria-hidden="true">#</a> 从 yes 开始</h3><ol><li>将观点从 no 转变为 yes，再开始工作；</li><li>当别人说了一个荒谬得观点，你先别急着说 no，可以先问一下 why ？</li><li>yes 代表着合作</li></ol><h3 id="学会自动化" tabindex="-1"><a class="header-anchor" href="#学会自动化" aria-hidden="true">#</a> 学会自动化</h3><ol><li>可重复得行为都能应用自动化；</li><li>自动化不仅用于测试；</li><li>在 IDE 中也要自动化；</li><li>自动化操作并不神秘；</li><li>学习自动化可以边做边学；</li></ol><h3 id="不要闭门造车" tabindex="-1"><a class="header-anchor" href="#不要闭门造车" aria-hidden="true">#</a> 不要闭门造车</h3><ol><li>多与别人交流可以更快成长</li></ol><h3 id="算法和数据结构" tabindex="-1"><a class="header-anchor" href="#算法和数据结构" aria-hidden="true">#</a> 算法和数据结构</h3><ol><li>好的算法和数据结构可以大大提高性能</li></ol><h3 id="终身维护代码" tabindex="-1"><a class="header-anchor" href="#终身维护代码" aria-hidden="true">#</a> 终身维护代码</h3><ol><li>编的不是代码，是态度</li></ol>',86),u={href:"https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/",target:"_blank",rel:"noopener noreferrer"};function f(x,b){const i=t("ExternalLinkIcon");return e(),h("div",null,[r(" more "),c,a("ul",null,[a("li",null,[a("a",u,[d("97-things-every-programmer-should-know"),o(i)])])])])}const m=l(s,[["render",f],["__file","article01.html.vue"]]);export{m as default};
